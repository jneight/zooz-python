# coding=utf-8

__title__ = 'zooz-python'
__version__ = '0.0.1'
__license__ = 'Apache 2.0'

import requests
import logging
logger = logging.getLogger(__name__)

try:
    import ujson as json
except ImportError:
    import json

ZOOZ_SANDBOX = False
ZOOZ_API_VERSION = '1.0.4'
ZOOZ_URLS = {
    'production': 'https://app.zooz.com/',
    'sandbox': 'https://sandbox.zooz.co/',
}


class ZoozException(Exception):
    """
        Extends Exception class adding:

            message: error message returned by ZooZ
            status_code: response status returned by ZooZ
    """
    def __init__(self, response):
        Exception.__init__(self, response['ResponseObject']['errorMessage'])
        self.status_code = response['ResponseStatus']


class ZoozRequest(object):
    """
        Client for the ZooZ Extended Server API

        Go to https://app.zooz.com/portal/PortalController?cmd=resources to
        see complete API documentation

        For authentication, two keys are needed:

            developer_id: developer email used to log in ZooZ Developers portal
            app_key: Server API Key found in ZooZ portal -> My Account

        By default, requests will be done to the 'production' ZooZ servers,
        so all transactions and payment will be real, to allow 'sandbox' mode
        just change the global variable ZOOZ_SANDBOX

            ZOOZ_SANDBOX = True
    """
    def __init__(
            self, developer_id, api_key):
        self.developer_id = developer_id
        self.api_key = api_key
        self.requests = requests.Session()

    @property
    def get_url(self):
        """
            Returns the final URI needed to do requests
        """
        global ZOOZ_SANDBOX
        global ZOOZ_URLS

        if ZOOZ_SANDBOX:
            return ZOOZ_URLS['sandbox'] + 'mobile/ExtendedServerAPI'
        else:
            return ZOOZ_URLS['production'] + 'mobile/ExtendedServerAPI'

    def post(self, payload):
        """
            Add authentication headers to the request
        """
        headers = {
            'ZooZDeveloperId': self.developer_id,
            'ZooZServerAPIKey': self.api_key,
        }

        return self.requests.post(self.get_url, data=payload, headers=headers)

    def get_transaction_status(self, transaction_id):
        """
            Get the info about a transaction using its ID

            Returns a dict with two keys:
                'ResponseStatus': 0 if all is correct
                'ResponseObject': transaction info, see ZooZExtendedAPI doc.

            In case ResponseStatus is not 0, a ZooZException will be raised.
        """
        assert transaction_id

        payload = {
            'cmd': 'getTransactionDetails',
            'ver': ZOOZ_API_VERSION,
            'transactionID': transaction_id,
        }
        logger.debug('[ZOOZ] get transaction with payload: %s', payload)
        response = self.post(payload).json()
        if response['ResponseStatus'] != int(0):
            raise ZoozException(response)
        return response

    def get_transactions(self, user_email, from_date=None, to_date=None):
        """
            Get the list of transaction generated by an user.

            Allows filtering by date, date should be in the format: YYYY-mm-dd

            Returns a dict with two keys:
                'ResponseStatus': 0 if all is correct
                'ResponseObject': transaction info, see ZooZExtendedAPI doc.

            In case ResponseStatus is not 0, a ZooZException will be raised.
        """
        assert user_email

        payload = {
            'cmd': 'getTransactionDetailsByPayerEmail',
            'ver': ZOOZ_API_VERSION,
            'email': user_email,
            'fromDate': from_date,
            'toDate': to_date,
        }

        logger.debug('[ZOOZ] get transactions for user: %s', payload)
        response = self.post(payload).json()
        if response['ResponseStatus'] != int(0):
            raise ZoozException(response)
        return response
